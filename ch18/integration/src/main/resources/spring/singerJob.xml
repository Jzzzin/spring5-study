<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:int="http://www.springframework.org/schema/integration"
       xmlns:int-file="http://www.springframework.org/schema/integration/file"
       xmlns:batch-int="http://www.springframework.org/schema/batch-integration"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/jdbc
        http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
        http://www.springframework.org/schema/batch
        http://www.springframework.org/schema/batch/spring-batch.xsd http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd http://www.springframework.org/schema/integration/file http://www.springframework.org/schema/integration/file/spring-integration-file.xsd http://www.springframework.org/schema/batch-integration http://www.springframework.org/schema/batch-integration/spring-batch-integration.xsd">

    <!-- DataSourceConfig  -->
    <!-- @Bean public DataSource dataSource() -->
    <jdbc:embedded-database id="dataSource" type="H2">
        <jdbc:script location="classpath:/org/springframework/batch/core/schema-h2.sql"/>
        <jdbc:script location="classpath:support/singer.sql"/>
    </jdbc:embedded-database>

    <!-- BatchConfig  -->
    <!-- @EnableBatchProcessing 구성 -->
    <bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher"
          p:jobRepository-ref="jobRepository"/>

    <!-- <batch:job-repository> 에서 사용하는 transactionManager 구성 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource"/>

    <!-- <batch:job> 에서 사용할 job-repository 구성 -->
    <batch:job-repository id="jobRepository"/>

    <!-- @Bean public Job singerJob() + @Bean protected Step step1() -->
    <batch:job id="singerJob">
        <batch:step id="step1">
            <batch:tasklet>
                <batch:chunk reader="itemReader" processor="itemProcessor" writer="itemWriter"
                             commit-interval="10"/>
                <batch:listeners>
                    <batch:listener ref="stepExecutionStatsListener"/>
                </batch:listeners>
            </batch:tasklet>
            <batch:fail on="FAILED"/>
            <batch:end on="*"/>
        </batch:step>
    </batch:job>

    <!-- <batch:job> 에서 사용할 <batch:listeners> 구성 -->
    <!-- @Autowired StepExecutionStatsListener executionStatsListener -->
    <bean id="stepExecutionStatsListener" class="ch18.StepExecutionStatsListener"/>

    <!-- <batch:job> 에서 사용할 reader 구성 -->
    <!-- @StepScope public FlatFileItemReader itemReader() -->
    <bean id="itemReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
        <property name="resource" value="file:///#{jobParameters['file.name']}"/>
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <property name="lineTokenizer">
                    <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <property name="names" value="firstName, lastName, song"/>
                    </bean>
                </property>
                <property name="fieldSetMapper">
                    <bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
                        <property name="targetType" value="ch18.Singer"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <!-- <batch:job> 에서 사용할 processor 구성 -->
    <!-- @Autowired SingerItemProcessor itemProcessor -->
    <bean id="itemProcessor" class="ch18.SingerItemProcessor"/>

    <!-- <batch:job> 에서 사용할 writer 구성 -->
    <!-- @Bean public ItemWriter<Singer> itemWriter() -->
    <bean id="itemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
        <property name="itemSqlParameterSourceProvider">
            <bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider"/>
        </property>
        <property name="sql"
                  value="INSERT INTO singer (first_name, last_name, song) VALUES (:firstName, :lastName, :song)"/>
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- IntegrationConfig -->
    <!-- @Bean public MessageChannel inbound() -->
    <int:channel id="inbound"/>
    <!-- @Bean public MessageChannel outbound() -->
    <int:channel id="outbound"/>
    <!-- @Bean public MessageChannel loggingChannel() -->
    <int:channel id="loggingChannel"/>

    <!-- @Bean @InboundChannelAdapter(channel = "inbound", poller = @Poller(fixedRate = "1000"))
    public MessageSource<File> inboundFileChannelAdapter()-->
    <int-file:inbound-channel-adapter id="inboundFileChannelAdapter" channel="inbound"
                                      directory="file:/tmp/" filename-pattern="*.csv">
        <int:poller fixed-rate="1000"/>
    </int-file:inbound-channel-adapter>

    <!-- @Bean @Transformer(inputChannel = "inbound", outputChannel = "outbound")
    public MessageToJobLauncher messageToJobLauncher() -->
    <int:transformer input-channel="inbound" output-channel="outbound">
        <bean class="ch18.MessageToJobLauncher">
            <constructor-arg ref="singerJob"/>
            <constructor-arg value="file.name"/>
        </bean>
    </int:transformer>

    <!-- @Bean @ServiceActivator(inputChannel = "outbound")
    public JobLaunchingGateway jobLaunchingGateway(JobLauncher jobLauncher) -->
    <batch-int:job-launching-gateway request-channel="outbound" reply-channel="loggingChannel"/>

    <!-- @Bean @ServiceActivator(inputChannel = "loggingChannel")
    public LoggingHandler logging() -->
    <int:logging-channel-adapter channel="loggingChannel"/>
</beans>